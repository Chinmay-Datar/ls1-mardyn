//
// Created by Heier on 07/29/2020.
//

#include "Virial2DProfile.h"
#include "DensityProfile.h"
#include "DOFProfile.h"
#include "KineticProfile.h"
#include "../FixRegion.h"

void Virial2DProfile::output(string prefix, long unsigned accumulatedDatasets) {

	global_log->info() << "[VirialProfile2D] output" << std::endl;

	// Setup outfile
	_accumulatedDatasets = accumulatedDatasets;
	_profilePrefix = prefix + "_2D-YR.Vipr";
	ofstream outfile(_profilePrefix.c_str());
	outfile.precision(6);
	
	
	// Write Header
	outfile << "//Segment volume: " << _samplInfo.segmentVolume << "\n//Accumulated data sets: " << _accumulatedDatasets
			<< "\n//Local profile of the partial pressures p = (px+py+pz)/3). Output file generated by the \"VirialProfile\" method, plugins/profiles. \n";
	outfile << "// \t dX \t dY \t dZ \n";
	outfile << "\t" << 1 / _samplInfo.universalInvProfileUnit[0] << "\t" << 1 / _samplInfo.universalInvProfileUnit[1]
			<< "\t" << 1 / _samplInfo.universalInvProfileUnit[2] << "\n";
	outfile << "0 \t\n";

	writeMatrix(outfile);
		
	outfile.close();
}
	
void Virial2DProfile::writeDataEntry(unsigned long uID, ofstream &outfile) const {
	
	// calculate local temperature
//	double localTemperature;	
//	
//	int dofs = _dofProfile->getGlobalDOF(uID);
//    if(dofs == 0){
//        localTemperature = 0.0;
//    }
//    else{
//        localTemperature = (_kineticProfile->getGlobalKineticEnergy(uID) / dofs);
//    }
	
	// calculate global temperature
	double globalTemperature = global_simulation->getDomain()->getCurrentTemperature(0);
	
	//calculate global temperature if fixedRegion is applied
	//global_log->info() <<  _samplInfo.globalNumMolecules << endl;
	unsigned long numMolFixRegion = _samplInfo.numMolFixRegion;
	double globalTemperatureFixRegion = globalTemperature * _samplInfo.globalNumMolecules / numMolFixRegion;
	
	//global_log->info() << _samplInfo.numMolFixRegion << endl;
	//global_log->info() << globalTemperatureFixRegion << endl;
	
	long double virial2Dx = 0.0;
	long double virial2Dy = 0.0;
	long double virial2Dz = 0.0;
	
	long double N = _densityProfile->getGlobalNumber(uID);
	long double Px = this->_global3dProfile.at(uID)[0];
	long double Py = this->_global3dProfile.at(uID)[1];
	long double Pz = this->_global3dProfile.at(uID)[2];
		

//	virial2Dx = (localTemperature* N + Px)/(_samplInfo.segmentVolume * _accumulatedDatasets);
//	virial2Dy = (localTemperature* N + Py)/(_samplInfo.segmentVolume * _accumulatedDatasets);
//	virial2Dz = (localTemperature* N + Pz)/(_samplInfo.segmentVolume * _accumulatedDatasets);		
	
//	virial2Dx = (globalTemperature* N + Px)/(_samplInfo.segmentVolume * _accumulatedDatasets);
//	virial2Dy = (globalTemperature* N + Py)/(_samplInfo.segmentVolume * _accumulatedDatasets);
//	virial2Dz = (globalTemperature* N + Pz)/(_samplInfo.segmentVolume * _accumulatedDatasets);

	virial2Dx = (globalTemperatureFixRegion* N + Px)/(_samplInfo.segmentVolume * _accumulatedDatasets);
	virial2Dy = (globalTemperatureFixRegion* N + Py)/(_samplInfo.segmentVolume * _accumulatedDatasets);
	virial2Dz = (globalTemperatureFixRegion* N + Pz)/(_samplInfo.segmentVolume * _accumulatedDatasets);	
		
	outfile << (virial2Dx + virial2Dy + virial2Dz)/3 << "\t";

}

