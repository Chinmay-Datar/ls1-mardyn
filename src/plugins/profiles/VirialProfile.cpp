//
// Created by Kruegener on 1/15/2019.
//

#include "VirialProfile.h"
#include "DensityProfile.h"

void VirialProfile::output (string prefix, long unsigned accumulatedDatasets) {
	global_log->info() << "[DensityProfile] output" << std::endl;

	// Setup outfile
	_accumulatedDatasets = accumulatedDatasets;
	_profilePrefix = prefix + "_1D-Y.Vipr";
	ofstream outfile(_profilePrefix.c_str());
	outfile.precision(6);

	// Write Header
	outfile << "//Segment volume: " << _samplInfo.segmentVolume << "\n//Accumulated data sets: " << _accumulatedDatasets << "\n//Local profile of the partial pressures. Output file generated by the \"VirialProfile\" method, plugins/profiles. \n";
	outfile << "// \t dX \t dY \t dZ \n";
	outfile << "\t" << 1/_samplInfo.universalInvProfileUnit[0] << "\t" << 1/_samplInfo.universalInvProfileUnit[1] << "\t" << 1/_samplInfo.universalInvProfileUnit[2]<< "\n";
	outfile << "0 \t\n";

	// y value, PD, PX, PY, PZ
	outfile << "# y\tvn-vt\tpx\tpy\tpz\n# \n";

	double layerVolume = _samplInfo.globalLength[0] * _samplInfo.globalLength[1];
	double globalTemperature = _samplInfo.globalTemperature;
	// Pressure increases with "Depth" in Y
	// Calculate Pressures on layer, then write 1D output
	for(unsigned y = 0; y < _samplInfo.universalProfileUnit[1]; y++){
		double hval = (y + 0.5) / _samplInfo.universalInvProfileUnit[1];
		outfile << hval << "  \t";
		long double Pd = 0.0;
		long double Px = 0.0;
		long double Py = 0.0;
		long double Pz = 0.0;
		// Molecules in current layer
		long double Ny = 0.0;

		// Build values from new X-Z layer
		for(unsigned x = 0; x < _samplInfo.universalProfileUnit[0]; x++){
			for(unsigned z = 0; z < _samplInfo.universalProfileUnit[2]; z++){
				auto unID = (unsigned long) (x * _samplInfo.universalProfileUnit[0] * _samplInfo.universalProfileUnit[2] + y * _samplInfo.universalProfileUnit[1] + z);
					// Add pressures
					Px += _global3dProfile[unID][0];
					Py += _global3dProfile[unID][1];
					Pz += _global3dProfile[unID][2];
					// Add molecules in layer
					Ny += _densityProfile->getGlobalNumber(unID);
			}
		}
		// Pressure differential
		Pd = Py - .5 * (Px + Pz);

		// Output line
		outfile << hval << "\t"
				<< Pd / (layerVolume * _accumulatedDatasets) << "\t"
				<< (globalTemperature*Ny + Px) / (layerVolume * _accumulatedDatasets) << "\t"
				<< (globalTemperature*Ny + Py) / (layerVolume * _accumulatedDatasets) << "\t"
				<< (globalTemperature*Ny + Pz) / (layerVolume * _accumulatedDatasets) << "\n";

	}

	outfile.close();
}
