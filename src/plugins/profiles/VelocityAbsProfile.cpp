//
// Created by Kruegener on 8/29/2018.
//

#include "VelocityAbsProfile.h"
#include "plugins/profiles/DensityProfile.h"

void VelocityAbsProfile::output(string prefix) {
    global_log->info() << "[VelocityAbsProfile] output" << std::endl;
    _profilePrefix = prefix;
    _profilePrefix += "_kartesian.VAbspr";

    // Need to get DensityProfile to calculate average velocities per bin independent of number density.

    ofstream outfile(_profilePrefix.c_str());
    outfile.precision(6);

    outfile << "//Segment volume: " << _kartProf->segmentVolume << "\n//Accumulated data sets: " << _kartProf->accumulatedDatasets << "\n//Local profile of magnitude of velocity. Output file generated by the \"VelocityAbsProfile\" method, plugins/profiles. \n";
    outfile << "//local velocity magnitude profile: Y - Z || X-projection\n";
    // TODO: more info
    outfile << "// \t dX \t dY \t dZ \n";
    outfile << "\t" << 1/_kartProf->universalInvProfileUnit[0] << "\t" << 1/_kartProf->universalInvProfileUnit[1] << "\t" << 1/_kartProf->universalInvProfileUnit[2]<< "\n";
    outfile << "0 \t";

    for(unsigned z = 0; z < _kartProf->universalProfileUnit[2]; z++){
        outfile << (z+0.5) / _kartProf->universalInvProfileUnit[2] <<"  \t\t\t"; // Eintragen der z Koordinaten in Header
    }
    outfile << "\n";
    long double vd;
    // Y - axis label
    for(unsigned y = 0; y < _kartProf->universalProfileUnit[1]; y++){
        double hval = (y + 0.5) / _kartProf->universalInvProfileUnit[1];
        outfile << hval << "\t";
        // number density values
        for(unsigned z = 0; z < _kartProf->universalProfileUnit[2]; z++){
            for(unsigned x = 0; x < _kartProf->universalProfileUnit[0]; x++){
                long unID = (long) (x * _kartProf->universalProfileUnit[0] * _kartProf->universalProfileUnit[2] + y * _kartProf->universalProfileUnit[1] + z);
                // Abs output
                // Check for division by 0
                int numberDensity = _densityProfile->getGlobalNumberDensity(unID);
                if(numberDensity != 0){
                    vd = _globalProfile[unID] / numberDensity;
                }
                else{
                    vd = 0;
                }
                outfile << vd << "\t";
            }
        }
        outfile << "\n";
    }
    outfile.close();
}
