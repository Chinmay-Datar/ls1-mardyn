# gnu compiler suite
# http://tu-dresden.de/die_tu_dresden/zentrale_einrichtungen/zih/forschung/software_werkzeuge_zur_unterstuetzung_von_programmierung_und_optimierung/vampir
# http://software.intel.com/en-us/intel-compilers/
# Version: 

CFG_INFO = "Vampirtrace instrumentation using Intel compiler (manual instrumentation)"

CFG_PARTYPES = ""
CFG_PARTYPES += "SEQ  sequential program\n"
CFG_PARTYPES += "PAR  MPI parallel program"

CFG_TARGETS = ""
CFG_TARGETS += "DEBUG    debug version, additional output, several compiler debug options\n"
CFG_TARGETS += "RELEASE  release version, compiler optimizations enabled"

CXX_SEQ = vtcxx -vt:inst manual
CXX_PAR = vtcxx -vt:cxx mpicxx -vt:inst manual
DEPMODE = gcc3

# SEQ
#########################################
# DEBUG
CXXFLAGS_SEQ_DEBUG  = -Wall -g 
LINKFLAGS_SEQ_DEBUG =
#RELEASE
CXXFLAGS_SEQ_RELEASE  = -O2 -Wall -g -DNDEBUG
LINKFLAGS_SEQ_RELEASE =

# PAR
#########################################
# DEBUG
CXXFLAGS_PAR_DEBUG  = -Wall -g -DENABLE_MPI
LINKFLAGS_PAR_DEBUG =
#RELEASE
CXXFLAGS_PAR_RELEASE  = -O2 -Wall -DNDEBUG -DENABLE_MPI
LINKFLAGS_PAR_RELEASE =

# Vectorization settings:
#########################################
ifeq ($(VECTORIZE_CODE),SSE)
CXXFLAGS_VECTORIZE = -msse3
endif
ifeq ($(VECTORIZE_CODE),AVX)
CXXFLAGS_VECTORIZE = -mavx
endif
ifeq ($(VECTORIZE_CODE),AVX2)
CXXFLAGS_VECTORIZE = -march=core-avx2 -fma # march=... should enable -fma automatically, but we will ensure it.
endif
ifeq ($(VECTORIZE_CODE),KNC_MASK)
CXXFLAGS_VECTORIZE = -mmic
LDFLAGS_VECTORIZE = -mmic
endif
ifeq ($(VECTORIZE_CODE),KNC_G_S)
CXXFLAGS_VECTORIZE = -mmic -D__VCP_GATHER__
LDFLAGS_VECTORIZE = -mmic
endif

# Special compile-rule for the VectorizedCellProcessor to enforce inlining.
particleContainer/adapter/VectorizedCellProcessor.o: particleContainer/adapter/VectorizedCellProcessor.cpp
	$(DEPCOMP) $(CXX) $(CXXFLAGS) -inline-forceinline -c $< -o $@
