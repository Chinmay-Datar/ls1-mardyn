/*! \page "Building and Running Mardyn"

!!! Makefile

Building using the makefile should always work, as this is the only reliable way
to build Mardyn on clusters / supercomputers.

Note that dependency tracking does not work properly, so better always do a
"make clean"...

!! Sequential Version

To build Mardyn in the sequential version (i.e. for single processor use),
CD into the src directory, type

\verbatim
make -f ../makefile/Makefile PARTYPE=SEQ TARGET=DEBUG UNIT_TESTS=1 VTK=1 -j3
\endverbatim

!! Running sequential

- The most reliable thing is to copy the executable as well as all(!) input files
  into the same directory.
- Execute
\verbatim
./MarDyn lj40000_t300.cfg 10
\endverbatim
where lj40000_t300.cfg is the scenario file and 10 iterations are performed

!! Parallel Version

To build Mardyn in the parallel version for MPI, CD into the src directory, type

\verbatim
make -f ../makefile/Makefile PARTYPE=PAR TARGET=DEBUG UNIT_TESTS=1 VTK=1 -j3
\endverbatim

!!! Eclipse

(recommended for development)

Download and install Eclipse CDT (http://www.eclipse.org/) together with the
Subclipse Plugin (SVN client, available at http://subclipse.tigris.org/).

The following screen shots show the settings to build Mardyn sequentially in debug mode:

\image eclipse_path.png

\image eclipse_preprocessor.png

\image eclipse_includes.png

\image eclipse_libraries.png

!!! Building with support for vectorization (SSE / AVX)

To compile the code with vectorization support simply add the appropriate flag to the make command:
make VECTORIZE_CODE=SSE
instead of SSE you can also specify AVX, AVX2, AVX512 or KNC.

!! Code

Vectorization is hand-coded in intrinsics, which are (at least) supported by GNU compiler, Intel compiler
and PGI compiler. All code is contained in particleContainer/adapter/VectorizedCellProcessor, which
is intended as a simple replacement for the LegacyCellProcessor.

To build Mardyn with support for vectorization, simply 

!! Compiler

The recommended (and tested) compiler for Intel processors is the intel compiler, for AMD processors, use
the GNU compiler. Gcc works as well for Intel processors, however the performance may be slightly lower.
Icc seems to generate non-working code for AMD-processors, maybe this also depends on the version of the
linux-kernel, this issue has not yet been clarified.

! Icc / gcc for Intel Processors

 To enable vectorization, specify the compile flags -msse3 for SSE or -mavx for AVX support.

! Gcc for AMD Processors (AMD Bulldozer)

To enable AVX, specify -mavx -mfma4 -march=bdver1 as compile flag.

*/
