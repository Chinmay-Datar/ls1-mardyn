/** \page "General Plugins"

Basic Idea
----------

The idea of the General Plugins is to allow *optional* code, which is not necessarily needed by all simulations to be inserted at specific locations in the primary simulation loop. This is to be used for various outputs, modifications to some molecules, etc. You can (and are recommended to) achieve all modifications to the primary program through such plugins. Some advantages of doing so. Plugins:
- provide a non-intrusive way of interacting with the main program, 
- are easy to switch on and off via XML, 
- are easy to maintain, 
- are easy to exchange with other users,
- do not pollute other classes, which are necessary for running the main code, such as Simulation and Domain.

(Note to older developers - this is an extension of the familiar concept of output plugins, present for a long time in ls1-mardyn.)

The schematic below shows the possible places in the program, at which you can insert your code.
\image html general-plugins.png

Comments about the state of the simulation at the individual interface calls
----------------------------------------------------------------------------
PluginBase::beforeEventNewTimestep: The iteration has just began. Molecules are sorted in the correct cells. Position and velocity are available at the exact same physical time.

PluginBase::beforeForces: The positions have been updated by a full timestep, while the velocities by a half timestep (see information on the Leapfrog integration scheme). (Some of) the molecules are not sorted in the correct cells. This step is appropriate for small modifications to the positions of molecules. However, moving a molecule by a large distance (on the order of a cutoff-radius) may lead to undefined behaviour.

PluginBase::afterForces: The new forces are available. There are molecules in the Halo cells (@Steffen maybe comment on the non-Full-shell MPI schemes?). Information on the individual molecular sites is up to date. This step is appropriate to compute any additional force contributions.

PluginBase::endStep: Virtually the same state as beforeEventNewTimestep, but the timestep counter is also good. This step is appropriate for output.

Important: if you need arguments to one of the interface calls, which are not already present, do not add them directly. Get them through the global_simulation object instead! Also, think about whether those arguments should maybe be member fields of your plugin.

Writing a new Plugin
--------------------

When writing a new plugin, you please do the following:
-# check the table of already existing plugins, to see whether some existin plugin already does what you need it to do, or can be meaningfully generalized to do what you need it to do (e.g. an existing plugin is collecting output along the X-dimension, and you need it to collect output along the Y-dimension, then it might be more meaningful to generalize the existing plugin, then to write a completely new one).
-# implement a new class by deriving from PluginBase (lets call it NewPlugin)
-# write your code and place it in src/plugins/NewPlugin.h and src/plugins/NewPlugin.cpp (keep in mind the styleguide rules!)
-# add your code to the PluginFactory by adding the lines
	- #include "plugins/NewPlugin.h"
	- REGISTER_PLUGIN(NewPlugin);
-# document your plugin in the summary \ref PluginsSummary, so that other users know that it is there and would not reimplement it
-# write a UnitTest for it, so that other people changing base code or - potentially generalizing/optimizing/bugfixing your plugin - will know whether they have broken it.
-# write some doxygen documentation.

Background
----------
The reason for introducing and insisting on using Plugins is because the classes Simulation and Domain become (became) very cluttered with application-specific code.
This makes it very difficult to maintain the code and determine which features are on, which features are off.
We have had grave errors due to this, e.g. have a supercomputer reserved for us an entire day only to have all our simulations crash when running on >10000 MPI, because of uninitialized values in user code, which was not supposed to be active at all.
So, please, stick to the rules and work with Plugins as much as possible. 
If you cannot achieve something with a plugin (i.e. the Plugin Interface needs to be extended), contact us so that we can extend them.

For a summary of Plugins currently in the trunk, see \ref PluginsSummary.

*/
