/** \page "General Plugins"

Basic Idea
----------

The idea of the General Plugins is to allow *optional* code, which is not necessarily needed by all simulations to be inserted at specific locations in the primary simulation loop. This is to be used for various outputs, modifications to some molecules, etc. You can (and are recommended to) achieve all modifications to the primary program through such plugins. Advantages of doing so. Plugins:
- provide a non-intrusive way of interacting with the main program, 
- are easy to switch on and off via XML, 
- are easy to maintain, 
- are easy to exchange with other users.

(Note to older developers - this is an extension of the familiar concept of output plugins, present for a long time in ls1-mardyn.)

The schematic below shows the possible places in the program, at which you can insert your code.
\image html general-plugins.png


Writing a new Plugin
--------------------

When writing a new plugin, you please do the following:
-# check the table of already existing plugins, to see whether some existin plugin already does what you need it to do, or can be meaningfully generalized to do what you need it to do (e.g. an existing plugin is collecting output along the X-dimension, and you need it to collect output along the Y-dimension, then it might be more meaningful to generalize the existing plugin, then to write a completely new one).
-# implement a new class by deriving from PluginBase (lets call it NewPlugin)
-# write your code and place it in src/plugins/NewPlugin.h and src/plugins/NewPlugin.cpp (keep in mind the styleguide rules!)
-# add your code to the PluginFactory by adding the lines
	- #include "plugins/NewPlugin.h"
	- REGISTER_PLUGIN(NewPlugin);
-# document your plugin here, so that other users know that it is there and would not reimplement it
-# write a UnitTest for it, so that other people changing base code or - potentially generalizing/optimizing/bugfixing your plugin - will know whether they have broken it.
-# write some doxygen documentation.

Summary of Plugins in Trunk
---------------------------

Since the number of plugins is expected to grow quite rapidly, the following table provides a list of the currently available plugins. It is intended to be searched for with the search option of the browser to look for keywords.

Plugin name  | Up to 5 Keywords | Short Description
------------- | ------------- | --
CavityWriter | todo | todo
CheckpointWriter | todo | todo
COMaligner | todo | todo
DecompWriter | todo | todo
DensityProfileWriter | todo | todo
EnergyLogWriter | todo | todo
ExamplePlugin  | example, sample, illustrate, usage | Print user-specifed text at a user-specified position in the code.  
FlopRateWriter | todo | todo
GammaWriter | todo | todo
LoadbalanceWriter | todo | todo
MaxCheck  | todo | todo
MaxWriter  | todo | todo
Mirror  | todo | todo
MmpldWriter  | todo | todo
MmspdBinWriter  | todo | todo
MPI_IOCheckpointWriter  | todo | todo
MPICheckpointWriter | todo | todo
PovWriter | todo | todo
RDF | todo | todo
ResultWriter | print, macroscopic thermodynamic quantities, file | Write macroscopic thermodynamic quantities to file, such as temperature, pressure, BetaTrans, BetaRot, cv, number of molecules and number of cavities (?).
SysMonOutput | todo | todo
TestPlugin  | test | Test correctness of plugin calls within Simulation.
VectorizationTuner | todo | todo
VISWriter | todo | todo
VTKGridWriter | todo | todo
VTKMoleculeWriter | todo | todo
XyzWriter | todo | todo

*/
